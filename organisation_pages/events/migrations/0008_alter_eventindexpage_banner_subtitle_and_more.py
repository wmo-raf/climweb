# Generated by Django 4.1.7 on 2023-05-02 11:36

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import timezone_field.fields
import wagtail.blocks
import wagtail.documents.blocks
import wagtail.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    dependencies = [
        ('wagtailcore', '0083_workflowcontenttype'),
        ('core', '0025_delete_theme'),
        ('events', '0007_remove_eventpage_feature_img_src'),
    ]

    operations = [
        migrations.AlterField(
            model_name='eventindexpage',
            name='banner_subtitle',
            field=models.CharField(max_length=255, verbose_name='Banner Subtitle'),
        ),
        migrations.AlterField(
            model_name='eventindexpage',
            name='banner_title',
            field=models.CharField(max_length=255, verbose_name='Banner Title'),
        ),
        migrations.AlterField(
            model_name='eventindexpage',
            name='call_to_action_button_text',
            field=models.CharField(blank=True, max_length=100, null=True, verbose_name='Call to action button text'),
        ),
        migrations.AlterField(
            model_name='eventindexpage',
            name='call_to_action_related_page',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page', verbose_name='Call to action related page'),
        ),
        migrations.AlterField(
            model_name='eventindexpage',
            name='events_per_page',
            field=models.PositiveIntegerField(default=6, help_text='How many events should be visible on the all events section ?', validators=[django.core.validators.MinValueValidator(6), django.core.validators.MaxValueValidator(20)], verbose_name='Events per page'),
        ),
        migrations.AlterField(
            model_name='eventpage',
            name='additional_materials',
            field=wagtail.fields.StreamField([('additional_material', wagtail.blocks.StructBlock([('type', wagtail.blocks.ChoiceBlock(choices=[('document', 'Document/File'), ('image', 'Image')])), ('title', wagtail.blocks.CharBlock(max_length=255)), ('document', wagtail.documents.blocks.DocumentChooserBlock(help_text='Select document or file', required=False, verbose_name='Document/File')), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='Select/upload image', required=False))]))], blank=True, null=True, use_json_field=True, verbose_name='Additional Materials'),
        ),
        migrations.AlterField(
            model_name='eventpage',
            name='cost',
            field=models.CharField(blank=True, help_text='What is the cost for participating in this event ? Leave blank if free', max_length=100, null=True, verbose_name='Cost'),
        ),
        migrations.AlterField(
            model_name='eventpage',
            name='description',
            field=wagtail.fields.RichTextField(help_text='A description of the event ', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='eventpage',
            name='event_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.eventtype', verbose_name='Event Type'),
        ),
        migrations.AlterField(
            model_name='eventpage',
            name='featured',
            field=models.BooleanField(default=False, help_text='Show this event in the events landing page as featured ?', verbose_name='Featured'),
        ),
        migrations.AlterField(
            model_name='eventpage',
            name='form_template',
            field=models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.SET_NULL, to='events.eventregistrationformtemplate', verbose_name='Form template'),
        ),
        migrations.AlterField(
            model_name='eventpage',
            name='image_placement',
            field=models.CharField(choices=[('side', 'Side by Side with Text'), ('top', 'At the top before text')], default='top', max_length=50, verbose_name='Image Placement'),
        ),
        migrations.AlterField(
            model_name='eventpage',
            name='is_archived',
            field=models.BooleanField(default=False, verbose_name='Is archived'),
        ),
        migrations.AlterField(
            model_name='eventpage',
            name='is_hidden',
            field=models.BooleanField(default=False, help_text='Make this event hidden in events page or elsewhere', verbose_name='Is hidden'),
        ),
        migrations.AlterField(
            model_name='eventpage',
            name='is_visible_on_homepage',
            field=models.BooleanField(default=False, help_text='Show this event on the homepage ?', verbose_name='Is visible on homepage'),
        ),
        migrations.AlterField(
            model_name='eventpage',
            name='location',
            field=models.CharField(help_text='Where will the event take place ?', max_length=100, verbose_name='Location'),
        ),
        migrations.AlterField(
            model_name='eventpage',
            name='panelists',
            field=wagtail.fields.StreamField([('panelist', wagtail.blocks.StructBlock([('name', wagtail.blocks.CharBlock(help_text='Name of panelist', max_length=255)), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='Select/upload image', required=False)), ('organisation', wagtail.blocks.CharBlock(help_text='Organisation working for or representing', max_length=255, required=False)), ('position', wagtail.blocks.CharBlock(help_text='Position in organisation', max_length=255, required=False)), ('bio', wagtail.blocks.RichTextBlock(help_text='Short bio', label='Short bio', required=False)), ('role', wagtail.blocks.ChoiceBlock(choices=[('moderator', 'Moderator'), ('discussant', 'Discussant')], help_text='Select Role. Leave blank if normal panelist', required=False)), ('topic_title', wagtail.blocks.CharBlock(help_text="Panelist's topic/session", max_length=255, required=False))]))], blank=True, null=True, use_json_field=True, verbose_name='Panelists'),
        ),
        migrations.AlterField(
            model_name='eventpage',
            name='registration_open',
            field=models.BooleanField(default=True, verbose_name='Registration open'),
        ),
        migrations.AlterField(
            model_name='eventpage',
            name='sessions',
            field=wagtail.fields.StreamField([('session', wagtail.blocks.StructBlock([('start_time', wagtail.blocks.DateTimeBlock(help_text='Session Start Time')), ('end_time', wagtail.blocks.DateTimeBlock(help_text='Session End Time')), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='Session Image', required=False)), ('title', wagtail.blocks.TextBlock(help_text='Session title')), ('detail', wagtail.blocks.RichTextBlock(features=['bold', 'ul', 'ol', 'link', 'superscript', 'subscript'], help_text='Detail', required=False)), ('roles', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('name', wagtail.blocks.CharBlock(help_text='Name of person', label='Name of person', max_length=255)), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='Select/upload image', required=False)), ('role', wagtail.blocks.ChoiceBlock(choices=[('moderator', 'Moderator'), ('speaker', 'Speaker'), ('rapporteur ', 'Rapporteur')], help_text='Select Role', required=False))])))]))], blank=True, null=True, use_json_field=True, verbose_name='Sessions'),
        ),
        migrations.AlterField(
            model_name='eventpage',
            name='timezone',
            field=timezone_field.fields.TimeZoneField(choices_display='WITH_GMT_OFFSET', default='Africa/Nairobi', help_text='Timezone', use_pytz=True, verbose_name='Timezone'),
        ),
        migrations.AlterField(
            model_name='eventregistrationpage',
            name='email_confirmation_message',
            field=wagtail.fields.RichTextField(blank=True, help_text='Message to send to the user. For example zoom links', verbose_name='Email Confirmation message'),
        ),
        migrations.AlterField(
            model_name='eventregistrationpage',
            name='email_field',
            field=models.CharField(blank=True, help_text='The field in the form that corresponds to the email to use. Should be snake_cased', max_length=100, verbose_name='Email Field'),
        ),
        migrations.AlterField(
            model_name='eventregistrationpage',
            name='send_confirmation_email',
            field=models.BooleanField(default=False, help_text='Should we send a confirmation/follow up email ?', verbose_name='Send confirmation Email'),
        ),
        migrations.AlterField(
            model_name='eventregistrationpage',
            name='thank_you_text',
            field=models.TextField(blank=True, help_text='Text to display after successful submission', null=True, verbose_name='Thank you text'),
        ),
        migrations.AlterField(
            model_name='eventregistrationpage',
            name='validation_field',
            field=models.CharField(blank=True, default='email_address', help_text='A field on the form to check if is already submitted so as to prevent multiple submissions by one person. This is usually the email address field in snake casing format', max_length=100, verbose_name='Validation Field'),
        ),
    ]
