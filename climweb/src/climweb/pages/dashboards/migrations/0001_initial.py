# Generated by Django 5.2.1 on 2025-09-05 11:54

import django.contrib.gis.db.models.fields
import django.db.models.deletion
import wagtail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('geomanager', '0052_remove_rasterstyle_rendering_engine'),
        ('wagtailcore', '0094_alter_page_locale'),
        ('wagtailimages', '0027_image_description'),
    ]

    operations = [
        migrations.CreateModel(
            name='DashboardGalleryPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('description', models.CharField(max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Dashboards Gallery',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='DashboardMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', wagtail.fields.RichTextField(blank=True, help_text='Description', null=True, verbose_name='Description')),
                ('area_desc', models.TextField(blank=True, help_text='The text describing the affected area of the alert message', max_length=50, null=True)),
                ('admin_level', models.IntegerField(choices=[(0, 'Level 0'), (1, 'Level 1'), (2, 'Level 2'), (3, 'Level 3')], default=1, help_text='Administrative Level')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326, verbose_name='Area')),
                ('admin_path', models.CharField(max_length=250, null=True)),
                ('map_layer', wagtail.fields.StreamField([('raster_file_layer', 0), ('wms_layer', 1), ('raster_tile_layer', 2), ('vector_tile_layer', 3)], block_lookup={0: ('climweb.base.blocks.UUIDModelChooserBlock', (), {'icon': 'map', 'target_model': 'geomanager.rasterfilelayer'}), 1: ('climweb.base.blocks.UUIDModelChooserBlock', (), {'icon': 'map', 'target_model': 'geomanager.wmslayer'}), 2: ('climweb.base.blocks.UUIDModelChooserBlock', (), {'icon': 'map', 'target_model': 'geomanager.rastertilelayer'}), 3: ('climweb.base.blocks.UUIDModelChooserBlock', (), {'icon': 'map', 'target_model': 'geomanager.vectortilelayer'})}, null=True, verbose_name='Map Layers')),
            ],
        ),
        migrations.CreateModel(
            name='ChartSnippet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', wagtail.fields.RichTextField(blank=True, help_text='Description', null=True, verbose_name='Description')),
                ('data_unit', models.CharField(blank=True, max_length=255)),
                ('chart_type', models.CharField(choices=[('line', 'Line Chart'), ('column', 'Vertical Bar Chart'), ('bar', 'Horizontal Bar Chart'), ('area', 'Area Chart'), ('scatter', 'Scatter Plot'), ('stripes', 'Warming stripes')], default='line', max_length=10)),
                ('chart_color', models.CharField(default='#0b76e1', help_text='Hex color code for chart color (e.g., #0b76e1)', max_length=7)),
                ('area_desc', models.TextField(blank=True, help_text='The text describing the affected area of the alert message. Click on map to generate name', max_length=50, null=True)),
                ('admin_level', models.IntegerField(choices=[(0, 'Level 0'), (1, 'Level 1'), (2, 'Level 2')], default=0, help_text='Administrative Level', null=True)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326, verbose_name='Area')),
                ('admin_path', models.CharField(max_length=250, null=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='charts', to='geomanager.rasterfilelayer')),
            ],
            options={
                'verbose_name': 'Dashboard Chart',
                'verbose_name_plural': 'Dashboard Charts',
            },
        ),
        migrations.CreateModel(
            name='DashboardPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('banner_title', models.CharField(max_length=255)),
                ('banner_description', wagtail.fields.RichTextField(help_text='Banner description')),
                ('banner_background_color', models.CharField(default='#f5f5f5', help_text='Hex color code for banner background (e.g., #ffffff)', max_length=7)),
                ('body', wagtail.fields.StreamField([('section', 15)], block_lookup={0: ('wagtail.blocks.CharBlock', (), {'required': True}), 1: ('wagtail.blocks.CharBlock', (), {'help_text': 'Section Title', 'max_length': 100, 'verbose_name': 'Section Title'}), 2: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote', 'code', 'ol', 'ul', 'link', 'document-link', 'image', 'embed', 'hr', 'anchor', 'table', 'justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull', 'indent', 'outdent', 'html'], 'help_text': 'Section description', 'verbose_name': 'Section Text'}), 3: ('wagtail.blocks.StructBlock', [[('title', 1), ('text', 2)]], {'icon': 'document'}), 4: ('wagtail.images.blocks.ImageChooserBlock', (), {'required': False}), 5: ('wagtail.blocks.StructBlock', [[('title', 1), ('text', 2), ('image', 4)]], {'icon': 'image'}), 6: ('wagtail.snippets.blocks.SnippetChooserBlock', (), {'target_model': 'dashboards.ChartSnippet'}), 7: ('wagtail.blocks.ListBlock', (6,), {}), 8: ('wagtail.blocks.StructBlock', [[('charts_block', 7)]], {}), 9: ('wagtail.snippets.blocks.SnippetChooserBlock', (), {'target_model': 'dashboards.DashboardMap'}), 10: ('wagtail.blocks.ListBlock', (9,), {}), 11: ('wagtail.blocks.StructBlock', [[('maps_block', 10)]], {}), 12: ('wagtail.contrib.table_block.blocks.TableBlock', (), {'table_options': {'colHeaders': False, 'rowHeaders': False}}), 13: ('wagtail.blocks.StructBlock', [[('title', 0), ('table', 12)]], {'icon': 'table'}), 14: ('wagtail.blocks.StreamBlock', [[('title_text', 3), ('title_text_image', 5), ('chart', 8), ('map', 11), ('table', 13)]], {'required': True}), 15: ('wagtail.blocks.StructBlock', [[('section_title', 0), ('content', 14)]], {})})),
                ('banner_image', models.ForeignKey(blank=True, help_text='A high quality banner image', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Banner Image')),
            ],
            options={
                'verbose_name': 'Dashboard Page',
            },
            bases=('wagtailcore.page',),
        ),
    ]