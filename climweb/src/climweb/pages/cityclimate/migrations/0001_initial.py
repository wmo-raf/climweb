# Generated by Django 4.2.2 on 2023-07-24 13:22

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.blocks
import wagtail.fields
import wagtail_color_panel.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0083_workflowcontenttype'),
        ('forecastmanager', '0005_alter_forecastdataparameters_parameter'),
    ]

    operations = [
        migrations.CreateModel(
            name='CityClimateDataPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('description', wagtail.fields.RichTextField(blank=True, null=True, verbose_name='Description')),
                ('time_format', models.CharField(blank=True, choices=[('day', "Day - e.g '01' "), ('dayandmonth', "Day and Month - e.g '01 Jan' "), ('month', "Month - e.g 'Jan' "), ('monthandyear', "Month and year - e.g 'Jan 2023' "), ('year', "Year - e.g '2023'")], help_text="In none selected,the default format e.g '2023-01-01' will be used", max_length=100, verbose_name='Time Format')),
                ('filter_by_month', models.BooleanField(default=False, verbose_name='Filter by Month')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='DataParameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(max_length=100, verbose_name='Parameter name')),
                ('units', models.CharField(blank=True, max_length=100, null=True, verbose_name='Units')),
                ('slug', models.CharField(max_length=150)),
                ('enabled', models.BooleanField(default=True, verbose_name='Enabled')),
                ('chart_config', wagtail.fields.StreamField([('line_chart', wagtail.blocks.StructBlock([('line_color', wagtail_color_panel.blocks.NativeColorBlock(default='#2caffe', label='Line Color'))], label='Line Chart')), ('bar_chart', wagtail.blocks.StructBlock([('fill_color', wagtail_color_panel.blocks.NativeColorBlock(default='#2caffe', label='Bar Fill Color'))], label='Bar Chart')), ('area_chart', wagtail.blocks.StructBlock([('fill_color', wagtail_color_panel.blocks.NativeColorBlock(default='#2caffe', label='Area Fill Color'))], label='Area Chart'))], blank=True, null=True, use_json_field=True, verbose_name='Chart Configuration')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_parameters', to='cityclimate.cityclimatedatapage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('date', models.DateField()),
                ('value', models.FloatField(blank=True, null=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='forecastmanager.city')),
                ('parameter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cityclimate.dataparameter')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
    ]
