# Generated by Django 4.2.2 on 2023-06-14 19:24

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import modelcluster.fields
import wagtail.blocks
import wagtail.documents.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtailmetadata.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailimages', '0025_alter_image_file_alter_rendition_file'),
        ('base', '0001_initial'),
        ('taggit', '0005_auto_20220424_2025'),
        ('wagtailcore', '0083_workflowcontenttype'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProductIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
            ],
            options={
                'verbose_name': 'Product Index Page',
                'verbose_name_plural': 'Product Index Pages',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ProductItemPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('date', models.DateField(default=django.utils.timezone.now, verbose_name='Date')),
                ('valid_until', models.DateField(blank=True, help_text='Up to when is this product valid ? Leave blank if not applicable', null=True, verbose_name='Valid until')),
                ('products', wagtail.fields.StreamField([('image_product', wagtail.blocks.StructBlock([('product_type', wagtail.blocks.CharBlock(label='Product Type', required=True)), ('image', wagtail.images.blocks.ImageChooserBlock(label='Image', required=True)), ('description', wagtail.blocks.RichTextBlock(label='Summary of the map/image information'))], label='Map/Image Product')), ('document_product', wagtail.blocks.StructBlock([('product_type', wagtail.blocks.CharBlock(label='Product Type', required=True)), ('thumbnail', wagtail.images.blocks.ImageChooserBlock(help_text='For example a screen grab of the cover page', label='Thumbnail of the document', required=False)), ('document', wagtail.documents.blocks.DocumentChooserBlock(label='Document', required=True)), ('description', wagtail.blocks.RichTextBlock(label='Summary of the document information'))], label='Document/Bulletin Product'))], use_json_field=True)),
                ('search_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Search image')),
            ],
            options={
                'verbose_name': 'Product Item',
            },
            bases=(wagtailmetadata.models.WagtailImageMetadataMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='ProductPageTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_tags', to='products.productitempage', verbose_name='Product Tag')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('introduction_title', models.CharField(help_text='Introduction section title', max_length=100, verbose_name='Introduction Title')),
                ('introduction_text', wagtail.fields.RichTextField(help_text='Introduction section description', verbose_name='Introduction text')),
                ('introduction_button_text', models.TextField(blank=True, max_length=20, null=True, verbose_name='Introduction button text')),
                ('products_per_page', models.PositiveIntegerField(default=6, help_text='How many of this products should be visible on the landing page filter section ?', validators=[django.core.validators.MinValueValidator(6), django.core.validators.MaxValueValidator(20)], verbose_name='Products per page')),
                ('introduction_button_link', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page', verbose_name='Introduction button link')),
                ('introduction_image', models.ForeignKey(blank=True, help_text='A high quality image', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Introduction Image')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='base.product', verbose_name='Product')),
                ('search_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Search image')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.servicecategory', verbose_name='Service')),
            ],
            options={
                'verbose_name': 'Product Page',
                'verbose_name_plural': 'Product Pages',
            },
            bases=(wagtailmetadata.models.WagtailImageMetadataMixin, 'wagtailcore.page', models.Model),
        ),
    ]
