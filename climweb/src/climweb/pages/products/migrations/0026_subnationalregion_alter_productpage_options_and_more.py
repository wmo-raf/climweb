# Generated by Django 4.2.7 on 2024-07-26 10:12

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import wagtail.fields
import wagtailcache.cache
import wagtailmetadata.models


class Migration(migrations.Migration):

    dependencies = [
        ('wagtailcore', '0089_log_entry_data_json_null_to_object'),
        ('wagtailimages', '0025_alter_image_file_alter_rendition_file'),
        ('base', '0029_alter_servicecategory_order'),
        ('products', '0025_productpage_default_listing_thumbnail'),
    ]

    operations = [
        migrations.CreateModel(
            name='SubNationalRegion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Subnational Region',
                'verbose_name_plural': 'Subnational Regions',
            },
        ),
        migrations.AlterModelOptions(
            name='productpage',
            options={'verbose_name': 'National Product Page', 'verbose_name_plural': 'National Product Pages'},
        ),
        migrations.CreateModel(
            name='SubNationalProductPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('introduction_title', models.CharField(help_text='Introduction section title', max_length=100, verbose_name='Introduction Title')),
                ('introduction_text', wagtail.fields.RichTextField(help_text='Introduction section description', verbose_name='Introduction text')),
                ('introduction_button_text', models.TextField(blank=True, max_length=20, null=True, verbose_name='Introduction button text')),
                ('introduction_button_link_external', models.URLField(blank=True, help_text='External Link if applicable. Ignored if internal page above is chosen', null=True)),
                ('products_per_page', models.PositiveIntegerField(default=6, help_text='How many of this products should be visible on the landing page filter section ?', validators=[django.core.validators.MinValueValidator(6), django.core.validators.MaxValueValidator(20)], verbose_name='Products per page')),
                ('default_listing_thumbnail', models.ForeignKey(blank=True, help_text='An image that will be used as a thumbnail for in the products listing, if no image can be extracted from product items', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Default Listing Thumbnail')),
                ('introduction_button_link', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page', verbose_name='Introduction button link')),
                ('introduction_image', models.ForeignKey(blank=True, help_text='A high quality image', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Introduction Image')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.product', verbose_name='Product')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='products.subnationalregion', verbose_name='Region')),
                ('search_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Search image')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.servicecategory', verbose_name='Primary Service')),
            ],
            options={
                'verbose_name': 'Subnational Product Page',
                'verbose_name_plural': 'Subnational Product Pages',
            },
            bases=(wagtailmetadata.models.WagtailImageMetadataMixin, 'wagtailcore.page', models.Model, wagtailcache.cache.WagtailCacheMixin),
        ),
    ]
